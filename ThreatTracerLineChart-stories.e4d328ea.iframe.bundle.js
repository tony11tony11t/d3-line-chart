"use strict";(self.webpackChunk_sonar_docs=self.webpackChunk_sonar_docs||[]).push([[733],{"../packages/d3/src/ThreatTracerLineChart/ThreatTracerLineChart.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Animation:()=>Animation,Area:()=>Area,Combine:()=>Combine,Default:()=>Default,Nogrid:()=>Nogrid,Omit:()=>Omit,OnlyOneOmit:()=>OnlyOneOmit,SpecificDate:()=>SpecificDate,SpecificThreeDate:()=>SpecificThreeDate,SpecificTwoDate:()=>SpecificTwoDate,UpdateLine:()=>UpdateLine,__namedExportsOrder:()=>__namedExportsOrder,default:()=>ThreatTracerLineChart_stories});var esm=__webpack_require__("../node_modules/@faker-js/faker/dist/esm/index.mjs"),src=__webpack_require__("../node_modules/d3/src/index.js"),moment=__webpack_require__("../node_modules/moment/moment.js"),moment_default=__webpack_require__.n(moment),react=__webpack_require__("../node_modules/react/index.js"),jsx_runtime=__webpack_require__("../node_modules/react/jsx-runtime.js");const margin_top=40,margin_right=80,margin_bottom=40,margin_left=80;function roundToSecondMostSignificantDigit(num){if(0===num)return 0;const digits=Math.floor(Math.log10(Math.abs(num)))+1;if(1===digits)return num;const factor=Math.pow(10,digits);return Math.round(num/factor)*factor}const ThreatTracerLineChart=({data,disableGrid,enableCenterLine,omit,enableAnimation,updateDateList,enableArea})=>{const[tooltipContent,setTooltipContent]=(0,react.useState)(""),[tooltipOpen,setTooltipOpen]=(0,react.useState)(!1),[tooltipPosition,setTooltipPosition]=(0,react.useState)({x:0,y:0}),[updateTooltipOpen,setUpdateTooltipOpen]=(0,react.useState)(!1),[updateTooltipPosition,setUpdateTooltipPosition]=(0,react.useState)({x:0,y:0}),animationEnded=(0,react.useRef)(!1),tooltipTimer=(0,react.useRef)(null),svgRef=(0,react.useRef)(null),tooltipRef=(0,react.useRef)(null),formattedDateRange=((data,desiredRange=31)=>{const dateRange=src.Wem(data,(d=>new Date(d.date)));if(!dateRange[0]||!dateRange[1])return[new Date,new Date];const dataLength=data.length,rangeLength=moment_default()(dateRange[1]).diff(moment_default()(dateRange[0]),"days")+1;let beforePadding,afterPadding;dataLength<=desiredRange-rangeLength?(beforePadding=Math.floor((desiredRange-rangeLength)/2),afterPadding=desiredRange-rangeLength-beforePadding):beforePadding=afterPadding=Math.max(0,(desiredRange-dataLength)/2);const adjustedStartDate=moment_default()(dateRange[0]).subtract(beforePadding,"days").toDate(),adjustedEndDate=moment_default()(dateRange[1]).add(afterPadding,"days").toDate();return[adjustedStartDate,new Date(moment_default()(adjustedEndDate).format("YYYY-MM-DD 23:59:59"))]})(data);return(0,react.useEffect)((()=>{const xScale=src.Xf().domain(formattedDateRange).range([50,1200-margin_right-margin_left-50]),yScale=src.BYU().domain([0,roundToSecondMostSignificantDigit(Math.max(...data.map((d=>d.total))))]).range([300-margin_top-margin_bottom,0]);if(omit){const full=300-margin_top-margin_bottom;yScale.domain([0,4e4,roundToSecondMostSignificantDigit(Math.max(...data.map((d=>d.total))))]).range([full,.8*full,0])}const rootSvg=src.Ys(svgRef.current).attr("viewBox",[0,0,1200,300]).attr("width",1200).attr("height",300).style("color","#5E5E5E"),bottomAxis=rootSvg.append("g").attr("transform",`translate(${margin_left}, ${300-margin_bottom})`).call(src.LLu(xScale).tickSizeOuter(0).tickSizeInner(disableGrid?0:-(300-margin_top-margin_bottom)).tickValues(src.rr1.range(...formattedDateRange,2)).tickFormat((d=>moment_default()(new Date(d)).format("MM-DD"))));disableGrid&&bottomAxis.select(".domain").style("transform","translateX(-50px)"),bottomAxis.selectAll(".tick").attr("data-date",(d=>moment_default()(d).format("YYYY-MM-DD"))),bottomAxis.selectAll(".tick line").attr("stroke-width","5").attr("stroke","#F4F4F4").style("transform","translateY(-1px)"),bottomAxis.selectAll(".tick text").attr("y",15).style("font-size","12px").style("font-weight","400"),bottomAxis.selectAll(".tick").insert("rect",":first-child").attr("width",50).attr("height",19.2).attr("fill","#F4F4F4").attr("x",-25).attr("y",9).attr("rx",2);const topAxis=rootSvg.append("g").attr("transform",`translate(${margin_left}, ${margin_top})`).call(src.F5q(xScale).tickSizeOuter(0).tickSizeInner(disableGrid?0:-(300-margin_top-margin_bottom)-12).tickValues(src.rr1.range(...formattedDateRange,1).filter(((d,i)=>i%2))).tickFormat((d=>moment_default()(new Date(d)).format("MM-DD"))));topAxis.select(".domain").remove(),topAxis.selectAll(".tick").attr("data-date",(d=>moment_default()(d).format("YYYY-MM-DD"))),topAxis.selectAll(".tick line").attr("stroke-width","5").attr("stroke","#F4F4F4").style("transform","translateY(-13px)"),topAxis.selectAll(".tick text").style("font-size","12px").style("font-weight","400").style("transform","translateY(-12px)"),topAxis.selectAll(".tick").insert("rect",".tick text").attr("width",50).attr("height",19.2).attr("fill","#F4F4F4").attr("x",-25).attr("y",-17.2).attr("rx",2).style("transform","translateY(-12px)");const leftAxis=rootSvg.append("g").attr("transform",`translate(${margin_left}, ${margin_top})`).call(src.y4O(yScale).tickSizeOuter(0).tickSizeInner(disableGrid?0:-(1200-margin_left-margin_right)).tickValues(omit?[0,...Array.from({length:9},((_,i)=>4e4+(yScale.domain()[2]-4e4)/8*i))]:src.w6H(0,yScale.domain()[1]+1,yScale.domain()[1]/10)));if(leftAxis.selectAll(".tick text").style("font-size","12px").style("font-weight","400"),leftAxis.selectAll(".tick line").attr("stroke-width","1").attr("stroke",((d,i)=>0===i?"#535353":"#F4F4F4")).style("transform","translateX(1px)"),enableArea){const areaGenerator=src.SOn().x((d=>xScale(new Date(d.date??"")))).y0(300-margin_top-margin_bottom).y1((d=>yScale(d.total)));rootSvg.append("path").datum(data).attr("class","chart-area").attr("d",areaGenerator).attr("transform",`translate(${margin_left}, ${margin_top})`).attr("fill","#dbd4ee")}if(updateDateList&&(null==updateDateList?void 0:updateDateList.length)>0){const updateDateLine=rootSvg.selectAll(".data-update-date").data(updateDateList).enter();updateDateLine.append("line").attr("class","data-update-date").attr("data-date",(d=>moment_default()(d).format("YYYY-MM-DD"))).attr("x1",(d=>xScale(d)-50+5)).attr("y1",0).attr("x2",(d=>xScale(d)-50+5)).attr("y2",300-margin_top-margin_bottom).attr("stroke","#9FC0FF").attr("stroke-width",3).attr("stroke-dasharray","20,10").attr("transform",`translate(${margin_left}, ${margin_top})`),updateDateLine.append("line").attr("class","data-update-date-bg").attr("x1",(d=>xScale(d)-50+5)).attr("y1",0).attr("x2",(d=>xScale(d)-50+5)).attr("y2",300-margin_top-margin_bottom).attr("stroke","transparent").attr("stroke-width",20).attr("transform",`translate(${margin_left}, ${margin_top})`).on("mouseover",(function(event,d){setUpdateTooltipPosition({x:xScale(new Date(d??"")),y:yScale(50)}),setUpdateTooltipOpen(!0),src.Ys(`.data-update-date[data-date="${moment_default()(d).format("YYYY-MM-DD")}"]`).attr("stroke","#508cfa")})).on("mouseout",(function(event,d){setUpdateTooltipOpen(!1),src.Ys(`.data-update-date[data-date="${moment_default()(d).format("YYYY-MM-DD")}"]`).attr("stroke","#9FC0FF")}))}const initialLineGenerator=src.jvg().x((d=>xScale(new Date(d.date??"")))).y(300-margin_top-margin_bottom),lineGenerator=src.jvg().x((d=>xScale(new Date(d.date??"")))).y((d=>yScale(d.total))),linePath=rootSvg.append("path").datum(data).attr("fill","none").attr("stroke","#7148D8").attr("stroke-width",2).attr("d",enableAnimation?initialLineGenerator:lineGenerator).attr("transform",`translate(${margin_left}, ${margin_top})`);enableAnimation&&linePath.transition().duration(1e3).attr("d",lineGenerator).on("end",(()=>{animationEnded.current=!0}));const circles=rootSvg.selectAll(".data-point").data(data).enter().append("circle").attr("class","data-point").attr("cx",(d=>xScale(new Date(d.date??"")))).attr("cy",(d=>enableAnimation?300-margin_top-margin_bottom:yScale(d.total))).attr("r",6).attr("fill","#ffffff").attr("stroke","#7148D8").attr("stroke-width",2).attr("transform",`translate(${margin_left}, ${margin_top})`).style("cursor","pointer").on("mouseover",(function(event,d){src.Ys(this).transition().duration(150).attr("fill","#7148D8").attr("stroke","#FFFFFF"),src.td_(".tick").select("rect").attr("fill","#F4F4F4"),src.td_(".tick").select("text").attr("fill","#535353");const selectedLabel=src.Ys(`.tick[data-date="${moment_default()(d.date).format("YYYY-MM-DD")}"]`);selectedLabel.select("rect").attr("fill","#535353"),selectedLabel.select("text").attr("fill","#F4F4F4"),enableCenterLine||(tooltipTimer.current&&clearTimeout(tooltipTimer.current),setTooltipContent(`${moment_default()(d.date).format("YYYY-MM-DD")}\nTotal: ${d.total}`),setTooltipPosition({x:xScale(new Date(d.date??"")),y:yScale(d.total)}),setTooltipOpen(!0))})).on("mouseout",(function(event,d){src.Ys(this).transition().duration(150).attr("fill","#ffffff").attr("stroke","#7148D8"),src.td_(".tick").select("rect").attr("fill","#F4F4F4"),src.td_(".tick").select("text").attr("fill","#535353"),enableCenterLine||(tooltipTimer.current=setTimeout((()=>setTooltipOpen(!1)),300))}));if(enableAnimation&&circles.transition().duration(1e3).attr("cy",(d=>yScale(d.total))),enableCenterLine){const gLine=rootSvg.append("g");gLine.append("line").attr("id","focusLineX").attr("class","focusLine"),gLine.append("line").attr("id","focusLineY").attr("class","focusLine"),gLine.append("circle").attr("id","focusCircle").attr("class","focusCircle"),gLine.append("text").attr("id","focusText").attr("x",9).attr("dy",".35em"),rootSvg.on("mousemove",(function(event,d){var _svgRef$current,_tooltipRef$current;if(enableAnimation&&!animationEnded.current)return;const[x,y]=src.cx$(event),svgRect=null===(_svgRef$current=svgRef.current)||void 0===_svgRef$current?void 0:_svgRef$current.getBoundingClientRect(),TooltipRect=null===(_tooltipRef$current=tooltipRef.current)||void 0===_tooltipRef$current?void 0:_tooltipRef$current.getBoundingClientRect();if(TooltipRect&&svgRect){const adjustedX=x+(null==svgRect?void 0:svgRect.left),adjustedY=y+(null==svgRect?void 0:svgRect.top);if(adjustedX>=(null==TooltipRect?void 0:TooltipRect.left)-20&&adjustedX<=(null==TooltipRect?void 0:TooltipRect.right)&&adjustedY>=(null==TooltipRect?void 0:TooltipRect.top)&&adjustedY<=(null==TooltipRect?void 0:TooltipRect.bottom))return}const mouseDate=xScale.invert(x-margin_left),i=src.b4o(data.map((d=>d.date)),mouseDate);if(0===i||i===data.length)return src.Ys("#focusLineX").style("display","none"),src.Ys("#focusLineY").style("display","none"),src.Ys("#focusCircle").style("display","none"),src.td_(".tick").select("rect").attr("fill","#F4F4F4"),src.td_(".tick").select("text").attr("fill","#535353"),void setTooltipOpen(!1);const d0=data[i-1],d1=data[i],selectedData=moment_default()(mouseDate).diff(moment_default()(d0.date))>moment_default()(d1.date).diff(moment_default()(mouseDate))?d1:d0,xPos=xScale(selectedData.date),yPos=yScale(selectedData.total);src.Ys("#focusCircle").style("display","block").attr("transform",`translate(${margin_left}, ${margin_top})`).attr("cx",xPos).attr("cy",yPos).attr("r",8).attr("fill","#7148D8").attr("stroke","#FFFFFF").attr("stroke-width",2),src.Ys("#focusLineX").style("display","block").attr("transform",`translate(${margin_left}, ${margin_top})`).attr("stroke","#535353").attr("stroke-width",2).attr("x1",xPos).attr("y1",yScale.range()[0]).attr("x2",xPos).attr("y2",yScale.range()[1]),src.Ys("#focusLineY").style("display","block").attr("transform",`translate(${margin_left-50}, ${margin_top})`).attr("stroke","#535353").attr("stroke-width",2).attr("x1",xScale.range()[0]).attr("y1",yPos).attr("x2",xScale.range()[1]).attr("y2",yPos),src.td_(".tick").select("rect").attr("fill","#F4F4F4"),src.td_(".tick").select("text").attr("fill","#535353");const selectedLabel=src.Ys(`.tick[data-date="${moment_default()(selectedData.date).format("YYYY-MM-DD")}"]`);selectedLabel.select("rect").attr("fill","#535353"),selectedLabel.select("text").attr("fill","#F4F4F4"),tooltipTimer.current&&clearTimeout(tooltipTimer.current),setTooltipContent(`${moment_default()(selectedData.date).format("YYYY-MM-DD")}\nTotal: ${selectedData.total}`),setTooltipPosition({x:xPos,y:yPos}),setTooltipOpen(!0)}))}if(omit){const omittedStartY=yScale(0)+15,wavePath=src.ETc();wavePath.moveTo(margin_left,omittedStartY);const waveAmplitude=5,waveLength=20;for(let x=0;x<1200-margin_left-margin_right;x+=waveLength)wavePath.bezierCurveTo(x+margin_left+waveLength/4,omittedStartY+waveAmplitude,x+margin_left+3*waveLength/4,omittedStartY-waveAmplitude,x+margin_left+waveLength,omittedStartY);rootSvg.append("rect").attr("x",0).attr("y",omittedStartY).attr("width",1200).attr("height",10).attr("fill","#ffffff"),rootSvg.append("path").attr("id","waveTop").attr("d",wavePath.toString()).attr("fill","none").attr("stroke","#000").attr("stroke-width","1"),rootSvg.append("path").attr("id","waveBottom").attr("d",wavePath.toString()).attr("fill","none").attr("stroke","#000").attr("stroke-width","1").style("transform","translate(0, 10px)")}}),[]),(0,jsx_runtime.jsxs)(jsx_runtime.Fragment,{children:[" ",(0,jsx_runtime.jsx)("svg",{ref:svgRef}),tooltipOpen&&(0,jsx_runtime.jsxs)("div",{ref:tooltipRef,style:{position:"absolute",top:tooltipPosition.y+margin_top/2,left:tooltipPosition.x+margin_left+20,backgroundColor:"#00000099",width:"100px",height:"70px"},onMouseOut:()=>{tooltipTimer.current=setTimeout((()=>setTooltipOpen(!1)),300)},onMouseOver:()=>{tooltipTimer.current&&clearTimeout(tooltipTimer.current)},children:[(0,jsx_runtime.jsx)("p",{style:{color:"#FFFFFF",textAlign:"center",margin:0,whiteSpace:"pre",fontSize:"12px"},children:tooltipContent}),(0,jsx_runtime.jsx)("div",{style:{textAlign:"center",width:"100%"},children:(0,jsx_runtime.jsx)("a",{href:"https://teamt5.org/tw/",rel:"noreferrer",style:{margin:0,fontSize:"12px",color:"#FFFFFF"},target:"_blank",children:"TeamT5"})})]}),updateTooltipOpen&&(0,jsx_runtime.jsx)("div",{style:{position:"absolute",top:updateTooltipPosition.y,left:updateTooltipPosition.x+50,backgroundColor:"#00000099",width:"100px",height:"20px"},children:(0,jsx_runtime.jsx)("p",{style:{color:"#FFFFFF",textAlign:"center",margin:0,whiteSpace:"pre",fontSize:"12px"},children:"Updated !"})})]})},ThreatTracerLineChart_ThreatTracerLineChart=ThreatTracerLineChart;try{ThreatTracerLineChart.displayName="ThreatTracerLineChart",ThreatTracerLineChart.__docgenInfo={description:"",displayName:"ThreatTracerLineChart",props:{data:{defaultValue:null,description:"",name:"data",required:!0,type:{name:"{ total: number; date: Date | null; }[]"}},updateDateList:{defaultValue:null,description:"",name:"updateDateList",required:!1,type:{name:"Date[] | undefined"}},disableGrid:{defaultValue:null,description:"",name:"disableGrid",required:!1,type:{name:"boolean | undefined"}},enableCenterLine:{defaultValue:null,description:"",name:"enableCenterLine",required:!1,type:{name:"boolean | undefined"}},omit:{defaultValue:null,description:"",name:"omit",required:!1,type:{name:"boolean | undefined"}},enableAnimation:{defaultValue:null,description:"",name:"enableAnimation",required:!1,type:{name:"boolean | undefined"}},enableArea:{defaultValue:null,description:"",name:"enableArea",required:!1,type:{name:"boolean | undefined"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["../packages/d3/src/ThreatTracerLineChart/ThreatTracerLineChart.tsx#ThreatTracerLineChart"]={docgenInfo:ThreatTracerLineChart.__docgenInfo,name:"ThreatTracerLineChart",path:"../packages/d3/src/ThreatTracerLineChart/ThreatTracerLineChart.tsx#ThreatTracerLineChart"})}catch(__react_docgen_typescript_loader_error){}var _Default$parameters,_Default$parameters2,_Default$parameters2$,_Nogrid$parameters,_Nogrid$parameters2,_Nogrid$parameters2$d,_Combine$parameters,_Combine$parameters2,_Combine$parameters2$,_Animation$parameters,_Animation$parameters2,_Animation$parameters3,_SpecificDate$paramet,_SpecificDate$paramet2,_SpecificDate$paramet3,_SpecificTwoDate$para,_SpecificTwoDate$para2,_SpecificTwoDate$para3,_SpecificThreeDate$pa,_SpecificThreeDate$pa2,_SpecificThreeDate$pa3,_UpdateLine$parameter,_UpdateLine$parameter2,_UpdateLine$parameter3,_Omit$parameters,_Omit$parameters2,_Omit$parameters2$doc,_OnlyOneOmit$paramete,_OnlyOneOmit$paramete2,_OnlyOneOmit$paramete3,_Area$parameters,_Area$parameters2,_Area$parameters2$doc;const ThreatTracerLineChart_stories={parameters:{storySource:{source:"import { faker } from '@faker-js/faker';\nimport { Meta, StoryObj } from '@storybook/react';\nimport * as d3 from 'd3';\nimport moment from 'moment';\nimport ThreatTracerLineChart from './ThreatTracerLineChart';\nexport default ({\n  title: 'd3/ThreatTracerLineChart',\n  component: ThreatTracerLineChart\n} as Meta);\ntype Story = StoryObj<typeof ThreatTracerLineChart>;\nexport const Default: Story = {\n  args: {\n    data: Array.from({\n      length: 31\n    }, (_, i) => ({\n      total: faker.datatype.number({\n        min: 0,\n        max: 10000\n      }),\n      date: d3.timeParse('%Y-%m-%d')(moment().add(i, 'day').format('YYYY-MM-DD'))\n    }))\n  }\n};\nexport const Nogrid: Story = {\n  args: {\n    data: Array.from({\n      length: 31\n    }, (_, i) => ({\n      total: faker.datatype.number({\n        min: 0,\n        max: 10000\n      }),\n      date: d3.timeParse('%Y-%m-%d')(moment().add(i, 'day').format('YYYY-MM-DD'))\n    })),\n    disableGrid: true,\n    enableCenterLine: true\n  }\n};\nexport const Combine: Story = {\n  args: {\n    data: Array.from({\n      length: 31\n    }, (_, i) => ({\n      total: faker.datatype.number({\n        min: 0,\n        max: 10000\n      }),\n      date: d3.timeParse('%Y-%m-%d')(moment().add(i, 'day').format('YYYY-MM-DD'))\n    })),\n    enableCenterLine: true\n  }\n};\nexport const Animation: Story = {\n  args: {\n    data: Array.from({\n      length: 31\n    }, (_, i) => ({\n      total: faker.datatype.number({\n        min: 0,\n        max: 10000\n      }),\n      date: d3.timeParse('%Y-%m-%d')(moment().add(i, 'day').format('YYYY-MM-DD'))\n    })),\n    enableCenterLine: true,\n    enableAnimation: true\n  }\n};\nexport const SpecificDate: Story = {\n  args: {\n    data: Array.from({\n      length: 1\n    }, (_, i) => ({\n      total: faker.datatype.number({\n        min: 0,\n        max: 10000\n      }),\n      date: d3.timeParse('%Y-%m-%d')(moment('2020-05-19').add(i, 'day').format('YYYY-MM-DD'))\n    })),\n    enableCenterLine: true,\n    enableAnimation: true\n  }\n};\nexport const SpecificTwoDate: Story = {\n  args: {\n    data: Array.from({\n      length: 2\n    }, (_, i) => ({\n      total: faker.datatype.number({\n        min: 0,\n        max: 10000\n      }),\n      date: d3.timeParse('%Y-%m-%d')(moment('2020-05-20').add(i, 'day').format('YYYY-MM-DD'))\n    })),\n    enableCenterLine: true,\n    enableAnimation: true\n  }\n};\nexport const SpecificThreeDate: Story = {\n  args: {\n    data: Array.from({\n      length: 3\n    }, (_, i) => ({\n      total: faker.datatype.number({\n        min: 0,\n        max: 10000\n      }),\n      date: d3.timeParse('%Y-%m-%d')(moment('2020-05-20').add(i, 'day').format('YYYY-MM-DD'))\n    })),\n    enableCenterLine: true,\n    enableAnimation: true\n  }\n};\nexport const UpdateLine: Story = {\n  args: {\n    data: Array.from({\n      length: 31\n    }, (_, i) => ({\n      total: faker.datatype.number({\n        min: 0,\n        max: 10000\n      }),\n      date: d3.timeParse('%Y-%m-%d')(moment().add(i, 'day').format('YYYY-MM-DD'))\n    })),\n    updateDateList: [moment().add(5, 'day').toDate(), moment().add(10, 'day').toDate()]\n  }\n};\nexport const Omit: Story = {\n  args: {\n    data: Array.from({\n      length: 31\n    }, (_, i) => ({\n      total: faker.datatype.number({\n        min: 47700,\n        max: 98375\n      }),\n      date: d3.timeParse('%Y-%m-%d')(moment().add(i, 'day').format('YYYY-MM-DD'))\n    })),\n    omit: true\n  }\n};\nexport const OnlyOneOmit: Story = {\n  args: {\n    data: Array.from({\n      length: 31\n    }, (_, i) => ({\n      total: i === 10 ? 1 : faker.datatype.number({\n        min: 47700,\n        max: 98375\n      }),\n      date: d3.timeParse('%Y-%m-%d')(moment().add(i, 'day').format('YYYY-MM-DD'))\n    })),\n    omit: true\n  }\n};\nexport const Area: Story = {\n  args: {\n    data: Array.from({\n      length: 31\n    }, (_, i) => ({\n      total: faker.datatype.number({\n        min: 0,\n        max: 10000\n      }),\n      date: d3.timeParse('%Y-%m-%d')(moment().add(i, 'day').format('YYYY-MM-DD'))\n    })),\n    enableArea: true\n  }\n};\nDefault.parameters = {\n  ...Default.parameters,\n  docs: {\n    ...Default.parameters?.docs,\n    source: {\n      originalSource: \"{\\n  args: {\\n    data: Array.from({\\n      length: 31\\n    }, (_, i) => ({\\n      total: faker.datatype.number({\\n        min: 0,\\n        max: 10000\\n      }),\\n      date: d3.timeParse('%Y-%m-%d')(moment().add(i, 'day').format('YYYY-MM-DD'))\\n    }))\\n  }\\n}\",\n      ...Default.parameters?.docs?.source\n    }\n  }\n};\nNogrid.parameters = {\n  ...Nogrid.parameters,\n  docs: {\n    ...Nogrid.parameters?.docs,\n    source: {\n      originalSource: \"{\\n  args: {\\n    data: Array.from({\\n      length: 31\\n    }, (_, i) => ({\\n      total: faker.datatype.number({\\n        min: 0,\\n        max: 10000\\n      }),\\n      date: d3.timeParse('%Y-%m-%d')(moment().add(i, 'day').format('YYYY-MM-DD'))\\n    })),\\n    disableGrid: true,\\n    enableCenterLine: true\\n  }\\n}\",\n      ...Nogrid.parameters?.docs?.source\n    }\n  }\n};\nCombine.parameters = {\n  ...Combine.parameters,\n  docs: {\n    ...Combine.parameters?.docs,\n    source: {\n      originalSource: \"{\\n  args: {\\n    data: Array.from({\\n      length: 31\\n    }, (_, i) => ({\\n      total: faker.datatype.number({\\n        min: 0,\\n        max: 10000\\n      }),\\n      date: d3.timeParse('%Y-%m-%d')(moment().add(i, 'day').format('YYYY-MM-DD'))\\n    })),\\n    enableCenterLine: true\\n  }\\n}\",\n      ...Combine.parameters?.docs?.source\n    }\n  }\n};\nAnimation.parameters = {\n  ...Animation.parameters,\n  docs: {\n    ...Animation.parameters?.docs,\n    source: {\n      originalSource: \"{\\n  args: {\\n    data: Array.from({\\n      length: 31\\n    }, (_, i) => ({\\n      total: faker.datatype.number({\\n        min: 0,\\n        max: 10000\\n      }),\\n      date: d3.timeParse('%Y-%m-%d')(moment().add(i, 'day').format('YYYY-MM-DD'))\\n    })),\\n    enableCenterLine: true,\\n    enableAnimation: true\\n  }\\n}\",\n      ...Animation.parameters?.docs?.source\n    }\n  }\n};\nSpecificDate.parameters = {\n  ...SpecificDate.parameters,\n  docs: {\n    ...SpecificDate.parameters?.docs,\n    source: {\n      originalSource: \"{\\n  args: {\\n    data: Array.from({\\n      length: 1\\n    }, (_, i) => ({\\n      total: faker.datatype.number({\\n        min: 0,\\n        max: 10000\\n      }),\\n      date: d3.timeParse('%Y-%m-%d')(moment('2020-05-19').add(i, 'day').format('YYYY-MM-DD'))\\n    })),\\n    enableCenterLine: true,\\n    enableAnimation: true\\n  }\\n}\",\n      ...SpecificDate.parameters?.docs?.source\n    }\n  }\n};\nSpecificTwoDate.parameters = {\n  ...SpecificTwoDate.parameters,\n  docs: {\n    ...SpecificTwoDate.parameters?.docs,\n    source: {\n      originalSource: \"{\\n  args: {\\n    data: Array.from({\\n      length: 2\\n    }, (_, i) => ({\\n      total: faker.datatype.number({\\n        min: 0,\\n        max: 10000\\n      }),\\n      date: d3.timeParse('%Y-%m-%d')(moment('2020-05-20').add(i, 'day').format('YYYY-MM-DD'))\\n    })),\\n    enableCenterLine: true,\\n    enableAnimation: true\\n  }\\n}\",\n      ...SpecificTwoDate.parameters?.docs?.source\n    }\n  }\n};\nSpecificThreeDate.parameters = {\n  ...SpecificThreeDate.parameters,\n  docs: {\n    ...SpecificThreeDate.parameters?.docs,\n    source: {\n      originalSource: \"{\\n  args: {\\n    data: Array.from({\\n      length: 3\\n    }, (_, i) => ({\\n      total: faker.datatype.number({\\n        min: 0,\\n        max: 10000\\n      }),\\n      date: d3.timeParse('%Y-%m-%d')(moment('2020-05-20').add(i, 'day').format('YYYY-MM-DD'))\\n    })),\\n    enableCenterLine: true,\\n    enableAnimation: true\\n  }\\n}\",\n      ...SpecificThreeDate.parameters?.docs?.source\n    }\n  }\n};\nUpdateLine.parameters = {\n  ...UpdateLine.parameters,\n  docs: {\n    ...UpdateLine.parameters?.docs,\n    source: {\n      originalSource: \"{\\n  args: {\\n    data: Array.from({\\n      length: 31\\n    }, (_, i) => ({\\n      total: faker.datatype.number({\\n        min: 0,\\n        max: 10000\\n      }),\\n      date: d3.timeParse('%Y-%m-%d')(moment().add(i, 'day').format('YYYY-MM-DD'))\\n    })),\\n    updateDateList: [moment().add(5, 'day').toDate(), moment().add(10, 'day').toDate()]\\n  }\\n}\",\n      ...UpdateLine.parameters?.docs?.source\n    }\n  }\n};\nOmit.parameters = {\n  ...Omit.parameters,\n  docs: {\n    ...Omit.parameters?.docs,\n    source: {\n      originalSource: \"{\\n  args: {\\n    data: Array.from({\\n      length: 31\\n    }, (_, i) => ({\\n      total: faker.datatype.number({\\n        min: 47700,\\n        max: 98375\\n      }),\\n      date: d3.timeParse('%Y-%m-%d')(moment().add(i, 'day').format('YYYY-MM-DD'))\\n    })),\\n    omit: true\\n  }\\n}\",\n      ...Omit.parameters?.docs?.source\n    }\n  }\n};\nOnlyOneOmit.parameters = {\n  ...OnlyOneOmit.parameters,\n  docs: {\n    ...OnlyOneOmit.parameters?.docs,\n    source: {\n      originalSource: \"{\\n  args: {\\n    data: Array.from({\\n      length: 31\\n    }, (_, i) => ({\\n      total: i === 10 ? 1 : faker.datatype.number({\\n        min: 47700,\\n        max: 98375\\n      }),\\n      date: d3.timeParse('%Y-%m-%d')(moment().add(i, 'day').format('YYYY-MM-DD'))\\n    })),\\n    omit: true\\n  }\\n}\",\n      ...OnlyOneOmit.parameters?.docs?.source\n    }\n  }\n};\nArea.parameters = {\n  ...Area.parameters,\n  docs: {\n    ...Area.parameters?.docs,\n    source: {\n      originalSource: \"{\\n  args: {\\n    data: Array.from({\\n      length: 31\\n    }, (_, i) => ({\\n      total: faker.datatype.number({\\n        min: 0,\\n        max: 10000\\n      }),\\n      date: d3.timeParse('%Y-%m-%d')(moment().add(i, 'day').format('YYYY-MM-DD'))\\n    })),\\n    enableArea: true\\n  }\\n}\",\n      ...Area.parameters?.docs?.source\n    }\n  }\n};",locationsMap:{default:{startLoc:{col:30,line:11},endLoc:{col:1,line:23},startBody:{col:30,line:11},endBody:{col:1,line:23}},nogrid:{startLoc:{col:29,line:24},endLoc:{col:1,line:38},startBody:{col:29,line:24},endBody:{col:1,line:38}},combine:{startLoc:{col:30,line:39},endLoc:{col:1,line:52},startBody:{col:30,line:39},endBody:{col:1,line:52}},animation:{startLoc:{col:32,line:53},endLoc:{col:1,line:67},startBody:{col:32,line:53},endBody:{col:1,line:67}},"specific-date":{startLoc:{col:35,line:68},endLoc:{col:1,line:82},startBody:{col:35,line:68},endBody:{col:1,line:82}},"specific-two-date":{startLoc:{col:38,line:83},endLoc:{col:1,line:97},startBody:{col:38,line:83},endBody:{col:1,line:97}},"specific-three-date":{startLoc:{col:40,line:98},endLoc:{col:1,line:112},startBody:{col:40,line:98},endBody:{col:1,line:112}},"update-line":{startLoc:{col:33,line:113},endLoc:{col:1,line:126},startBody:{col:33,line:113},endBody:{col:1,line:126}},omit:{startLoc:{col:27,line:127},endLoc:{col:1,line:140},startBody:{col:27,line:127},endBody:{col:1,line:140}},"only-one-omit":{startLoc:{col:34,line:141},endLoc:{col:1,line:154},startBody:{col:34,line:141},endBody:{col:1,line:154}},area:{startLoc:{col:27,line:155},endLoc:{col:1,line:168},startBody:{col:27,line:155},endBody:{col:1,line:168}}}}},title:"d3/ThreatTracerLineChart",component:ThreatTracerLineChart_ThreatTracerLineChart},Default={args:{data:Array.from({length:31},((_,i)=>({total:esm.We.datatype.number({min:0,max:1e4}),date:src.Z1g("%Y-%m-%d")(moment_default()().add(i,"day").format("YYYY-MM-DD"))})))}},Nogrid={args:{data:Array.from({length:31},((_,i)=>({total:esm.We.datatype.number({min:0,max:1e4}),date:src.Z1g("%Y-%m-%d")(moment_default()().add(i,"day").format("YYYY-MM-DD"))}))),disableGrid:!0,enableCenterLine:!0}},Combine={args:{data:Array.from({length:31},((_,i)=>({total:esm.We.datatype.number({min:0,max:1e4}),date:src.Z1g("%Y-%m-%d")(moment_default()().add(i,"day").format("YYYY-MM-DD"))}))),enableCenterLine:!0}},Animation={args:{data:Array.from({length:31},((_,i)=>({total:esm.We.datatype.number({min:0,max:1e4}),date:src.Z1g("%Y-%m-%d")(moment_default()().add(i,"day").format("YYYY-MM-DD"))}))),enableCenterLine:!0,enableAnimation:!0}},SpecificDate={args:{data:Array.from({length:1},((_,i)=>({total:esm.We.datatype.number({min:0,max:1e4}),date:src.Z1g("%Y-%m-%d")(moment_default()("2020-05-19").add(i,"day").format("YYYY-MM-DD"))}))),enableCenterLine:!0,enableAnimation:!0}},SpecificTwoDate={args:{data:Array.from({length:2},((_,i)=>({total:esm.We.datatype.number({min:0,max:1e4}),date:src.Z1g("%Y-%m-%d")(moment_default()("2020-05-20").add(i,"day").format("YYYY-MM-DD"))}))),enableCenterLine:!0,enableAnimation:!0}},SpecificThreeDate={args:{data:Array.from({length:3},((_,i)=>({total:esm.We.datatype.number({min:0,max:1e4}),date:src.Z1g("%Y-%m-%d")(moment_default()("2020-05-20").add(i,"day").format("YYYY-MM-DD"))}))),enableCenterLine:!0,enableAnimation:!0}},UpdateLine={args:{data:Array.from({length:31},((_,i)=>({total:esm.We.datatype.number({min:0,max:1e4}),date:src.Z1g("%Y-%m-%d")(moment_default()().add(i,"day").format("YYYY-MM-DD"))}))),updateDateList:[moment_default()().add(5,"day").toDate(),moment_default()().add(10,"day").toDate()]}},Omit={args:{data:Array.from({length:31},((_,i)=>({total:esm.We.datatype.number({min:47700,max:98375}),date:src.Z1g("%Y-%m-%d")(moment_default()().add(i,"day").format("YYYY-MM-DD"))}))),omit:!0}},OnlyOneOmit={args:{data:Array.from({length:31},((_,i)=>({total:10===i?1:esm.We.datatype.number({min:47700,max:98375}),date:src.Z1g("%Y-%m-%d")(moment_default()().add(i,"day").format("YYYY-MM-DD"))}))),omit:!0}},Area={args:{data:Array.from({length:31},((_,i)=>({total:esm.We.datatype.number({min:0,max:1e4}),date:src.Z1g("%Y-%m-%d")(moment_default()().add(i,"day").format("YYYY-MM-DD"))}))),enableArea:!0}};Default.parameters={...Default.parameters,docs:{...null===(_Default$parameters=Default.parameters)||void 0===_Default$parameters?void 0:_Default$parameters.docs,source:{originalSource:"{\n  args: {\n    data: Array.from({\n      length: 31\n    }, (_, i) => ({\n      total: faker.datatype.number({\n        min: 0,\n        max: 10000\n      }),\n      date: d3.timeParse('%Y-%m-%d')(moment().add(i, 'day').format('YYYY-MM-DD'))\n    }))\n  }\n}",...null===(_Default$parameters2=Default.parameters)||void 0===_Default$parameters2||null===(_Default$parameters2$=_Default$parameters2.docs)||void 0===_Default$parameters2$?void 0:_Default$parameters2$.source}}},Nogrid.parameters={...Nogrid.parameters,docs:{...null===(_Nogrid$parameters=Nogrid.parameters)||void 0===_Nogrid$parameters?void 0:_Nogrid$parameters.docs,source:{originalSource:"{\n  args: {\n    data: Array.from({\n      length: 31\n    }, (_, i) => ({\n      total: faker.datatype.number({\n        min: 0,\n        max: 10000\n      }),\n      date: d3.timeParse('%Y-%m-%d')(moment().add(i, 'day').format('YYYY-MM-DD'))\n    })),\n    disableGrid: true,\n    enableCenterLine: true\n  }\n}",...null===(_Nogrid$parameters2=Nogrid.parameters)||void 0===_Nogrid$parameters2||null===(_Nogrid$parameters2$d=_Nogrid$parameters2.docs)||void 0===_Nogrid$parameters2$d?void 0:_Nogrid$parameters2$d.source}}},Combine.parameters={...Combine.parameters,docs:{...null===(_Combine$parameters=Combine.parameters)||void 0===_Combine$parameters?void 0:_Combine$parameters.docs,source:{originalSource:"{\n  args: {\n    data: Array.from({\n      length: 31\n    }, (_, i) => ({\n      total: faker.datatype.number({\n        min: 0,\n        max: 10000\n      }),\n      date: d3.timeParse('%Y-%m-%d')(moment().add(i, 'day').format('YYYY-MM-DD'))\n    })),\n    enableCenterLine: true\n  }\n}",...null===(_Combine$parameters2=Combine.parameters)||void 0===_Combine$parameters2||null===(_Combine$parameters2$=_Combine$parameters2.docs)||void 0===_Combine$parameters2$?void 0:_Combine$parameters2$.source}}},Animation.parameters={...Animation.parameters,docs:{...null===(_Animation$parameters=Animation.parameters)||void 0===_Animation$parameters?void 0:_Animation$parameters.docs,source:{originalSource:"{\n  args: {\n    data: Array.from({\n      length: 31\n    }, (_, i) => ({\n      total: faker.datatype.number({\n        min: 0,\n        max: 10000\n      }),\n      date: d3.timeParse('%Y-%m-%d')(moment().add(i, 'day').format('YYYY-MM-DD'))\n    })),\n    enableCenterLine: true,\n    enableAnimation: true\n  }\n}",...null===(_Animation$parameters2=Animation.parameters)||void 0===_Animation$parameters2||null===(_Animation$parameters3=_Animation$parameters2.docs)||void 0===_Animation$parameters3?void 0:_Animation$parameters3.source}}},SpecificDate.parameters={...SpecificDate.parameters,docs:{...null===(_SpecificDate$paramet=SpecificDate.parameters)||void 0===_SpecificDate$paramet?void 0:_SpecificDate$paramet.docs,source:{originalSource:"{\n  args: {\n    data: Array.from({\n      length: 1\n    }, (_, i) => ({\n      total: faker.datatype.number({\n        min: 0,\n        max: 10000\n      }),\n      date: d3.timeParse('%Y-%m-%d')(moment('2020-05-19').add(i, 'day').format('YYYY-MM-DD'))\n    })),\n    enableCenterLine: true,\n    enableAnimation: true\n  }\n}",...null===(_SpecificDate$paramet2=SpecificDate.parameters)||void 0===_SpecificDate$paramet2||null===(_SpecificDate$paramet3=_SpecificDate$paramet2.docs)||void 0===_SpecificDate$paramet3?void 0:_SpecificDate$paramet3.source}}},SpecificTwoDate.parameters={...SpecificTwoDate.parameters,docs:{...null===(_SpecificTwoDate$para=SpecificTwoDate.parameters)||void 0===_SpecificTwoDate$para?void 0:_SpecificTwoDate$para.docs,source:{originalSource:"{\n  args: {\n    data: Array.from({\n      length: 2\n    }, (_, i) => ({\n      total: faker.datatype.number({\n        min: 0,\n        max: 10000\n      }),\n      date: d3.timeParse('%Y-%m-%d')(moment('2020-05-20').add(i, 'day').format('YYYY-MM-DD'))\n    })),\n    enableCenterLine: true,\n    enableAnimation: true\n  }\n}",...null===(_SpecificTwoDate$para2=SpecificTwoDate.parameters)||void 0===_SpecificTwoDate$para2||null===(_SpecificTwoDate$para3=_SpecificTwoDate$para2.docs)||void 0===_SpecificTwoDate$para3?void 0:_SpecificTwoDate$para3.source}}},SpecificThreeDate.parameters={...SpecificThreeDate.parameters,docs:{...null===(_SpecificThreeDate$pa=SpecificThreeDate.parameters)||void 0===_SpecificThreeDate$pa?void 0:_SpecificThreeDate$pa.docs,source:{originalSource:"{\n  args: {\n    data: Array.from({\n      length: 3\n    }, (_, i) => ({\n      total: faker.datatype.number({\n        min: 0,\n        max: 10000\n      }),\n      date: d3.timeParse('%Y-%m-%d')(moment('2020-05-20').add(i, 'day').format('YYYY-MM-DD'))\n    })),\n    enableCenterLine: true,\n    enableAnimation: true\n  }\n}",...null===(_SpecificThreeDate$pa2=SpecificThreeDate.parameters)||void 0===_SpecificThreeDate$pa2||null===(_SpecificThreeDate$pa3=_SpecificThreeDate$pa2.docs)||void 0===_SpecificThreeDate$pa3?void 0:_SpecificThreeDate$pa3.source}}},UpdateLine.parameters={...UpdateLine.parameters,docs:{...null===(_UpdateLine$parameter=UpdateLine.parameters)||void 0===_UpdateLine$parameter?void 0:_UpdateLine$parameter.docs,source:{originalSource:"{\n  args: {\n    data: Array.from({\n      length: 31\n    }, (_, i) => ({\n      total: faker.datatype.number({\n        min: 0,\n        max: 10000\n      }),\n      date: d3.timeParse('%Y-%m-%d')(moment().add(i, 'day').format('YYYY-MM-DD'))\n    })),\n    updateDateList: [moment().add(5, 'day').toDate(), moment().add(10, 'day').toDate()]\n  }\n}",...null===(_UpdateLine$parameter2=UpdateLine.parameters)||void 0===_UpdateLine$parameter2||null===(_UpdateLine$parameter3=_UpdateLine$parameter2.docs)||void 0===_UpdateLine$parameter3?void 0:_UpdateLine$parameter3.source}}},Omit.parameters={...Omit.parameters,docs:{...null===(_Omit$parameters=Omit.parameters)||void 0===_Omit$parameters?void 0:_Omit$parameters.docs,source:{originalSource:"{\n  args: {\n    data: Array.from({\n      length: 31\n    }, (_, i) => ({\n      total: faker.datatype.number({\n        min: 47700,\n        max: 98375\n      }),\n      date: d3.timeParse('%Y-%m-%d')(moment().add(i, 'day').format('YYYY-MM-DD'))\n    })),\n    omit: true\n  }\n}",...null===(_Omit$parameters2=Omit.parameters)||void 0===_Omit$parameters2||null===(_Omit$parameters2$doc=_Omit$parameters2.docs)||void 0===_Omit$parameters2$doc?void 0:_Omit$parameters2$doc.source}}},OnlyOneOmit.parameters={...OnlyOneOmit.parameters,docs:{...null===(_OnlyOneOmit$paramete=OnlyOneOmit.parameters)||void 0===_OnlyOneOmit$paramete?void 0:_OnlyOneOmit$paramete.docs,source:{originalSource:"{\n  args: {\n    data: Array.from({\n      length: 31\n    }, (_, i) => ({\n      total: i === 10 ? 1 : faker.datatype.number({\n        min: 47700,\n        max: 98375\n      }),\n      date: d3.timeParse('%Y-%m-%d')(moment().add(i, 'day').format('YYYY-MM-DD'))\n    })),\n    omit: true\n  }\n}",...null===(_OnlyOneOmit$paramete2=OnlyOneOmit.parameters)||void 0===_OnlyOneOmit$paramete2||null===(_OnlyOneOmit$paramete3=_OnlyOneOmit$paramete2.docs)||void 0===_OnlyOneOmit$paramete3?void 0:_OnlyOneOmit$paramete3.source}}},Area.parameters={...Area.parameters,docs:{...null===(_Area$parameters=Area.parameters)||void 0===_Area$parameters?void 0:_Area$parameters.docs,source:{originalSource:"{\n  args: {\n    data: Array.from({\n      length: 31\n    }, (_, i) => ({\n      total: faker.datatype.number({\n        min: 0,\n        max: 10000\n      }),\n      date: d3.timeParse('%Y-%m-%d')(moment().add(i, 'day').format('YYYY-MM-DD'))\n    })),\n    enableArea: true\n  }\n}",...null===(_Area$parameters2=Area.parameters)||void 0===_Area$parameters2||null===(_Area$parameters2$doc=_Area$parameters2.docs)||void 0===_Area$parameters2$doc?void 0:_Area$parameters2$doc.source}}};const __namedExportsOrder=["Default","Nogrid","Combine","Animation","SpecificDate","SpecificTwoDate","SpecificThreeDate","UpdateLine","Omit","OnlyOneOmit","Area"]}}]);